# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch

name: Deploy to Amazon ECS

on:
  push:
    branches: [main]

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: mydocqa-app
  ECS_SERVICE: mydocqa-service
  ECS_CLUSTER: mydocqa-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: nextjs-docker

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'false'

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> .env
          echo "DYNAMODB_ACCESS_KEY_ID=${{ secrets.DYNAMODB_ACCESS_KEY_ID }}" >> .env
          echo "DYNAMODB_SECRET_ACCESS_KEY=${{ secrets.DYNAMODB_SECRET_ACCESS_KEY }}" >> .env
          echo "USER_POOL_CLIENT_SECRET=${{ secrets.USER_POOL_CLIENT_SECRET }}" >> .env
          echo "CONTACT_FORM_API_KEY=${{ secrets.CONTACT_FORM_API_KEY }}" >> .env
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env
          echo "AWS_REGION=${{ vars.AWS_REGION }}" >> .env
          echo "DOMAIN_NAME=${{ vars.DOMAIN_NAME }}" >> .env
          echo "ACM_CERTIFICATE_ARN=${{ vars.ACM_CERTIFICATE_ARN }}" >> .env
          echo "PINECONE_INDEX_NAME=${{ vars.PINECONE_INDEX_NAME }}" >> .env
          echo "BUCKET_NAME=${{ vars.BUCKET_NAME }}" >> .env
          echo "IDENTITY_POOL_ID=${{ vars.IDENTITY_POOL_ID }}" >> .env
          echo "USER_POOL_ENDPOINT=${{ vars.USER_POOL_ENDPOINT }}" >> .env
          echo "USER_POOL_CLIENT_ID=${{ vars.USER_POOL_CLIENT_ID }}" >> .env
          echo "USER_POOL_DOMAIN_URL=${{ vars.USER_POOL_DOMAIN_URL }}" >> .env
          echo "NEXT_PUBLIC_OAUTH_LOGIN_URL=${{ vars.NEXT_PUBLIC_OAUTH_LOGIN_URL }}" >> .env
          echo "CONTACT_FORM_API_ENDPOINT=${{ vars.CONTACT_FORM_API_ENDPOINT }}" >> .env

          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
          environment-variables: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
            DYNAMODB_ACCESS_KEY_ID=${{ secrets.DYNAMODB_ACCESS_KEY_ID }}
            DYNAMODB_SECRET_ACCESS_KEY=${{ secrets.DYNAMODB_SECRET_ACCESS_KEY }}
            USER_POOL_CLIENT_SECRET=${{ secrets.USER_POOL_CLIENT_SECRET }}
            CONTACT_FORM_API_KEY=${{ secrets.CONTACT_FORM_API_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            AWS_REGION=${{ vars.AWS_REGION }}
            DOMAIN_NAME=${{ vars.DOMAIN_NAME }}
            ACM_CERTIFICATE_ARN=${{ vars.ACM_CERTIFICATE_ARN }}
            PINECONE_INDEX_NAME=${{ vars.PINECONE_INDEX_NAME }}
            BUCKET_NAME=${{ vars.BUCKET_NAME }}
            IDENTITY_POOL_ID=${{ vars.IDENTITY_POOL_ID }}
            USER_POOL_ENDPOINT=${{ vars.USER_POOL_ENDPOINT }}
            USER_POOL_CLIENT_ID=${{ vars.USER_POOL_CLIENT_ID }}
            USER_POOL_DOMAIN_URL=${{ vars.USER_POOL_DOMAIN_URL }}
            NEXT_PUBLIC_OAUTH_LOGIN_URL=${{ vars.NEXT_PUBLIC_OAUTH_LOGIN_URL }}
            CONTACT_FORM_API_ENDPOINT=${{ vars.CONTACT_FORM_API_ENDPOINT }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
